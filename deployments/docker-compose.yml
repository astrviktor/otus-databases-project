version: "3"
services:

  creator:
    image: creator:develop
#    build: ../docker
    container_name: creator
#    volumes:
#      - ../configs/config_compose.yaml:/etc/banner-rotation/config.yaml
    ports:
      - "8888:8888"
    networks:
      docker:
        ipv4_address: 10.5.0.2
        aliases:
          - creator

  prometheus:
    image: prom/prometheus:v2.39.1
    volumes:
      - ./prometheus:/etc/prometheus/
    container_name: prometheus
    hostname: prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
    restart: unless-stopped
    environment:
      TZ: "Europe/Moscow"
    networks:
      docker:
        ipv4_address: 10.5.0.3
        aliases:
          - prometheus

  node-exporter:
    image: prom/node-exporter:v1.4.0
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    container_name: node-exporter
    hostname: node-exporter
    command:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --collector.filesystem.ignored-mount-points
      - ^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)
    ports:
      - 9100:9100
    expose:
      - 9100
    restart: unless-stopped
    environment:
      TZ: "Europe/Moscow"
    labels:
      org.label-schema.group: "monitoring"
    networks:
      docker:
        ipv4_address: 10.5.0.100
        aliases:
          - node-exporter

  grafana:
    image: grafana/grafana:9.2.3
    user: root
    depends_on:
      - prometheus
    ports:
      - 3000:3000
#    volumes:
#      - ./grafana:/var/lib/grafana
#      - ./grafana/provisioning/:/etc/grafana/provisioning/
    container_name: grafana
    hostname: grafana
    restart: unless-stopped
    environment:
      TZ: "Europe/Moscow"
    networks:
      docker:
        ipv4_address: 10.5.0.4
        aliases:
          - grafana

  yandex-tank:
#    image: direvius/yandex-tank
    build: ./yandex-tank
#    entrypoint: /bin/bash
    depends_on:
      - creator
    volumes:
      - ./yandex-tank/create-segment.yaml:/var/loadtest/create-segment.yaml
      - ./yandex-tank/create-segment.sh:/var/loadtest/create-segment.sh
      - ./yandex-tank/ammo.txt:/var/loadtest/ammo.txt
      - ./yandex-tank/get-segment.yaml:/var/loadtest/get-segment.yaml
      - ./yandex-tank/get-segment.sh:/var/loadtest/get-segment.sh
    container_name: yandex-tank
    networks:
      docker:
        ipv4_address: 10.5.0.5
        aliases:
          - yandex-tank

  postgres:
    image: postgres:15.1-bullseye #postgres:15.1-alpine3.17 #postgres:14
    container_name: postgres
    environment:
      POSTGRES_DB: "creator"
      POSTGRES_USER: "user"
      POSTGRES_PASSWORD: "password"
      TZ: 'UTC'
      PGTZ: 'UTC'
    volumes:
      - ../migrations/postgres.sql:/docker-entrypoint-initdb.d/postgres.sql
      - volume_postgres:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      docker:
        ipv4_address: 10.5.0.6
        aliases:
          - postgres

  mysql:
    image: mariadb:10.9.4-jammy #mysql:8.0.31-debian  #mysql:5.7.40-debian
    container_name: mysql
    environment:
      - MYSQL_ROOT_PASSWORD=password
      - MYSQL_DATABASE=creator
      - MYSQL_USER=user
      - MYSQL_PASSWORD=password
    command:
      --init-file /mysql.sql
#      --log-bin-trust-function-creators 1
    volumes:
#      - ./mysql.conf:/etc/mysql/conf.d
      - volume_mysql:/var/lib/mysql
      - ../migrations/mysql.sql:/mysql.sql
    expose:
      - "3306"
    ports:
      - "3306:3306"
    networks:
      docker:
        ipv4_address: 10.5.0.7
        aliases:
          - mysql

  mongodb:
    image: mongo:6.0.3 #mongo:5.0.14
    container_name: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - volume_mongodb:/data/db
    ports:
      - "27017:27017"
    networks:
      docker:
        ipv4_address: 10.5.0.8
        aliases:
          - mongodb

#  mongo-express:
#    image: mongo-express
#    container_name: mongo-express
#    restart: always
#    ports:
#      - 8081:8081
#    environment:
#      ME_CONFIG_MONGODB_ADMINUSERNAME: root
#      ME_CONFIG_MONGODB_ADMINPASSWORD: password
#      ME_CONFIG_MONGODB_URL: mongodb://root:password@mongodb:27017/
#    networks:
#      docker:
#        ipv4_address: 10.5.0.9
#        aliases:
#          - mongo-express


  clickhouse:
    image: clickhouse/clickhouse-server:22.8.11.15-alpine
    container_name: clickhouse
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - volume_clickhouse:/var/lib/clickhouse
      - ../migrations/clickhouse.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      docker:
        ipv4_address: 10.5.0.10
        aliases:
          - clickhouse

  tarantool:
    image: tarantool/tarantool:2.10.4-ubuntu
    container_name: tarantool
    environment:
      TARANTOOL_USER_NAME: user
      TARANTOOL_USER_PASSWORD: password
    ports:
      - "3301:3301"
    volumes:
      - volume_tarantool:/var/lib/tarantool
    networks:
      docker:
        ipv4_address: 10.5.0.11
        aliases:
          - tarantool
#  docker exec -i -t tarantool console


volumes:
  volume_postgres:
  volume_mysql:
  volume_mongodb:
  volume_clickhouse:
  volume_tarantool:

networks:
  docker:
    driver: bridge
    ipam:
      config:
        - subnet: 10.5.0.0/16
